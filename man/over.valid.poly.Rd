% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/over.valid.poly.R
\name{over.valid.poly}
\alias{over.valid.poly}
\title{Internal function}
\usage{
over.valid.poly(
  poly,
  points,
  names_poly = NULL,
  names_taxa = NULL,
  mode = "spheroid",
  proj_type = "cea",
  min.dist = 0.1,
  value = "dist"
)
}
\arguments{
\item{poly}{Spatial polygon}

\item{points}{XY data frame}

\item{names_poly}{character string}

\item{names_taxa}{character string}

\item{mode}{character string either 'spheroid' or 'planar'. By default 'spheroid'#'}

\item{proj_type}{character string or numeric or object of CRS class, by default is "cea"}

\item{min.dist}{minimum tolerated distance between polygons and points.
Default to 0.1 m.}

\item{value}{output value: proportional distance ("dist") or inside/outside
the polygon ("flag")?}

\item{proj_user}{projected coordinate system (in meters)}
}
\description{
Get Occurrences Distance to a Polygon
}
\details{
The spatial polygon must be a \code{SpatialPolygonsDataFrame} in which
each polygon/feature is one taxon, an the data frame contains a column
\code{tax} with the taxa name. The XY data frame has the same structure as other
XY objects within \code{ConR} with the three first columns being \code{ddlat},
\code{ddlon} and \code{tax}, but also a column \code{classes} with the classes of
conficence level, which is represented by numbers in increasing order of
confidence. For instance, if confidence levels are "low" and "high", the
corresponding values in columns \code{classes} should be 1 and 2.
}
\examples{

mydf <- data.frame(ddlat = c(-44.6,-46.2,-45.4,-42.2,-43.7,-45.0,-28.0),
                   ddlon = c(-42.2,-42.6,-45.3,-42.5,-42.3,-39.0,-17.2),
                   tax = rep("a", 7),
                   valid = c(c(TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE)),
                   stringsAsFactors = FALSE)
mydf$classes = as.double(mydf$valid)
shp <- EOO.computing(mydf[mydf$valid,], export_shp = TRUE)[[2]]
shp$a <- data.frame(tax = "a", stringsAsFactors = FALSE)
plot(mydf[,2:1])
plot(sf::st_geometry(shp), add=TRUE)
over.valid.poly(shp, mydf, names_poly = "a", names_taxa = "a")
over.valid.poly(shp, mydf, names_poly = "a", names_taxa = "a", value = "flag")  
over.valid.poly(shp, mydf, names_poly = "a", names_taxa = "b")

}
